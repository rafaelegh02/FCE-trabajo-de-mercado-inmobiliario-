values_from = porcentaje,
values_fill = 0
)
View(matriz_transicion)
fechas_trimestres <- tibble(
trimestre = c("2023-T1", "2023-T2"),
fecha_inicio = c("2023-01-01", "2023-04-01"),
fecha_fin = c("2023-03-31", "2023-06-30")
)
fechas_trimestres <- fechas_trimestres %>%
mutate(
fecha_inicio = ymd(fecha_inicio),
fecha_fin = ymd(fecha_fin),
duracion_dias = as.numeric(fecha_fin - fecha_inicio) + 1,
punto_medio = fecha_inicio + floor(duracion_dias / 2)
)
View(fechas_trimestres)
install.packages("mtcars")
library("mtcars")
mtcars
mtcars_tbl <- as_tibble(mtcars, rownames = "modelo")
glimpse(mtcars_tbl)
View(mtcars_tbl)
glimpse(mtcars_tbl)
mtcars_long <- pivot_longer(mtcars_tbl,
cols = -modelo,
names_to = "variable",
values_to = "valor")
View(mtcars_long)
View(mtcars_tbl)
ejercicio1b <- mtcars_long %>%
filter(variable %in% c("hp", "mpg","qsec"))
View(ejercicio1b)
data(penguins)
glimpse(penguins)
data(penguins)
install.packages("palmerpenguins")
data(penguins)
glimpse(penguins)
data(penguins)
data(penguins)
glimpse(penguins)
cat("-- Ejemplo con vector numérico --\n")
numeros <- c(2, 4, 6, 8, 10)
suma <- 0
for (num in numeros) {
suma <- suma + num
print(paste("Sumando", num, "- Suma actual:", suma))
}
print(paste("Suma final:", suma))
cat("\n-- Ejemplo con secuencia --\n")
for (i in seq(1, 10, by = 2)) {
resultado <- i^2
print(paste("El cuadrado de", i, "es", resultado))
}
cat("\n-- Ejemplo con índices para acceder a elementos --\n")
nombres <- c("Ana", "Carlos", "Elena", "David", "Beatriz")
i <- 3
for (i in 1:length(nombres)) {
print(paste("Persona", i, ":", nombres[i]))
print(paste("Persona", i, ":", nombres[i]))
nombres[i]
nombres <- c("Ana", "Carlos", "Elena", "David", "Beatriz")
nombres
nombres
ad
cat("\n-- Ejemplo con secuencia --\n")
for (i in seq(1, 10, by = 2)) {
resultado <- i^2
print(paste("El cuadrado de", i, "es", resultado))
}
as
sad
a
cat("-- Ejemplo con vector numérico --\n")
numeros <- c(2, 4, 6, 8, 10)
suma <- 0
cat("-- Ejemplo con vector numérico --\n")
numeros <- c(2, 4, 6, 8, 10)
suma <- 0
ç
for (num in numeros) {
suma <- suma + num
print(paste("Sumando", num, "- Suma actual:", suma))
}
print(paste("Suma final:", suma))
cat("\n-- Ejemplo con secuencia --\n")
for (i in seq(1, 10, by = 2)) {
resultado <- i^2
print(paste("El cuadrado de", i, "es", resultado))
}
nombres <- c("Ana", "Carlos", "Elena", "David", "Beatriz")
nombres
i <- 1
for (i in 1:length(nombres)) {
print(paste("Persona", i, ":", nombres[i]))
nombres[i]
i <- 3
nombres[i]
if (substr(nombres[i], 1, 1) %in% c("A", "E", "I", "O", "U"))
print("  (Este nombre comienza con vocal)")
}
{print("  (Este nombre comienza con vocal)")
}
substr(nombres[i], 1, 1) %in% c("A", "E", "I", "O", "U")
else {
if (substr(nombres[i], 1, 1) %in% c("A", "E", "I", "O", "U")) {
print("  (Este nombre comienza con vocal)")
} else {
print('  (Este nombre no comienza con vocal)')
}
}
else {
else {
else
else {
else {
print('  (Este nombre no comienza con vocal)')
}
if (substr(nombres[i], 1, 1) %in% c("A", "E", "I", "O", "U")) {
print("  (Este nombre comienza con vocal)")
} else {
print('  (Este nombre no comienza con vocal)')
}
}
if (substr(nombres[i], 1, 1) %in% c("A", "E", "I", "O", "U")) {
print("  (Este nombre comienza con vocal)")
} else {
print('  (Este nombre no comienza con vocal)')
}
if (substr(nombres[i], 1, 1) %in% c("A", "E", "I", "O", "U")) {
print("  (Este nombre comienza con vocal)")
} else {
print('  (Este nombre no comienza con vocal)')
}
if (substr(nombres[i], 1, 1) %in% c("A", "E", "I", "O", "U"))
{
print("  (Este nombre comienza con vocal)")
}
else {
else {print('  (Este nombre no comienza con vocal)')}
(stringr::str_extract(nombres[i], '^[A-Z]')
stringr
nombres
i<-1
for (i in 1:5) {
fila <- ""
for (j in 1:5) {
# Formateamos para alinear los números
producto <- i * j
fila <- paste(fila, sprintf("%3d", producto))
fila
fdaç
fa
f
af
sd
f
as
f
as
f
sa
f
f
filter(aña)
}
Esc
9
)
fila <- ""fila
fila <- ""
for (j in 1:5) {
# Formateamos para alinear los números
producto <- i * j
fila <- paste(fila, sprintf("%3d", producto))
}
j<-1
producto
fila
fila <-""
producto
producto<-1
producto<-5
producto <- i * j
paste(fila, sprintf("%3d", producto))
for (i in 1:5) {
fila <- ""
for (j in 1:5) {
# Formateamos para alinear los números
producto <- i * j
fila <- paste(fila, sprintf("%3d", producto))
}
cat(fila, "\n") # Concatena los datos separados por un parrafo
Sys.sleep(2) # Para que entre cada iteracion espere 2 segundos
}
num<-1
caras<-4
tiradas<-1
set.seed(123 + num_dados + caras + tiradas)
num_dados<-1
set.seed(123 + num_dados + caras + tiradas)
delete(num)
rm(num)
set.seed(123 + num_dados + caras + tiradas)
todas_tiradas <- replicate(tiradas, sum(sample(1:caras, num_dados, replace = TRUE)))
sum(sample(1:caras, num_dados, replace = TRUE))
sum(sample(1:caras, num_dados, replace = TRUE))
sum(sample(1:caras, num_dados, replace = TRUE))
sum(sample(1:caras, num_dados, replace = TRUE))
todas_tiradas
cat(sprintf("Con %d dado(s) de %d caras, en %d tirada(s): promedio = %.2f\n",
num_dados, caras, tiradas, info$promedio))
poblacion_inicial <- 100
tasa_crecimiento <- 0.05
anos <- 0
poblacion_actual <- poblacion_inicial
while (poblacion_actual < 200)
{
anos <- anos + 1
poblacion_actual <- poblacion_actual + (poblacion_actual * tasa_crecimiento)
print(paste("Año", anos, "- Población:", round(poblacion_actual)))
}
print(paste("Se necesitaron", anos, "años para duplicar la población inicial."))
anios_loop <- c()
for(i in 1:1000){
poblacion_inicial <- 100
anos <- 0
poblacion_actual <- poblacion_inicial
)
set.seed(42)
lanzamientos <- 0
caras_consecutivas <- 0
while (TRUE) {
lanzamientos <- lanzamientos + 1
resultado <- sample(c("cara", "cruz"), 1)
resultado
9
)
while (TRUE) {
lanzamientos <- lanzamientos + 1
resultado <- sample(c("cara", "cruz"), 1)
)
caras_consecutivas
if (caras_consecutivas >= 3) {
cat("\n¡Conseguimos 3 caras consecutivas después de", lanzamientos, "lanzamientos!\n")
break
}
resultado
install.packages("purrr")
library(purrr)
numeros <- c(1, 2, 3, 4, 5)
numeros
resultados <- map(numeros, function(x) {
return(list(
original = x,
cuadrado = x^2,
cubo = x^3
))
})
View(resultados)
dir.create("datos_ejemplo", showWarnings = FALSE)
for (i in 1:3) {
df <- data.frame(
id = 1:5,
valor = runif(5, 0, 100),
grupo = sample(LETTERS[1:3], 5, replace = TRUE)
)
)
df <- data.frame(
id = 1:5,
valor = runif(5, 0, 100),
grupo = sample(LETTERS[1:3], 5, replace = TRUE)
)
write.csv(df, file = paste0("datos_ejemplo/datos_", i, ".csv"), row.names = FALSE)
}
df
library(readr)
archivos_csv <- list.files(path = "datos_ejemplo",
pattern = "*.csv",
full.names = TRUE)
archivos_csv
print(archivos_csv)
datos_combinados <- map_df(archivos_csv, function(archivo) {
# Leemos el archivo
datos <- read_csv(archivo, show_col_types = FALSE)
# Añadimos el nombre del archivo como columna para identificar el origen
datos$archivo_origen <- basename(archivo)
return(datos)
})
View(datos_combinados)
datos_for_loop <- data.frame()
datos <- read_csv(archivo, show_col_types = FALSE)
datos_for_loop <- rbind(datos_for_loop, datos)
library(palmerpenguins)
EJE2A <- penguins %>%
group_by(species, island) %>%
summarise(media_pico = mean(bill_length_mm, na.rm = TRUE))
EJE2A <- penguins %>%
group_by(species, island) %>%
summary(media_pico = mean(bill_length_mm, na.rm = TRUE))
library(tidyverse)
EJE2A <- penguins %>%
group_by(species, island) %>%
summary(media_pico = mean(bill_length_mm, na.rm = TRUE))
print(EJE2A)
data("penguins")
glimpse(penguins)
itemb_largo <- penguins %>%
pivot_longer(
cols = c(island)
row = c(species)
EJE2B <- EJE2A %>%
pivot_wider(
names_from = island,
values_from = media_pico
)
EJE2A <- penguins %>%
group_by(species, island) %>%
summarise(media_pico = mean(bill_length_mm, na.rm = TRUE))
EJE2B <- EJE2A %>%
pivot_wider(
names_from = island,
values_from = media_pico
)
View(EJE2A)
EJE2C <- EJE2B %>%
rowwise() %>%
mutate(
diferencia = max(c_across(where(is.numeric)), na.rm = TRUE) -
min(c_across(where(is.numeric)), na.rm = TRUE)
) %>%
ungroup()
View(EJE2C)
View(EJE2B)
View(EJE2A)
install.packages("rvest")
library(tidyverse)
library(rvest)
pagina <- read_html('https://listado.mercadolibre.com.ar/cafetera#D[A:cafetera]')
View(pagina)
cuadros <- pagina %>%
html_elements(xpath = '//li[starts-with(@class, "ui-search-layout__item")]')
View(cuadros)
datos_finales <- tibble(nombre = character(),
precio_viejo = character(),
precio_nuevo = character(),
todo = character(),
url = character()
)
View(datos_finales)
i <- 1
for(i in 1:length(cuadros)){
tryCatch({
nombre <- cuadros[[i]] %>%
html_elements(css='[class="poly-card poly-card--list poly-card--large poly-card--CORE"]') %>%
html_text2()
url <- cuadros[[i]] %>%
html_elements(css='[class="poly-card poly-card--list poly-card--large poly-card--CORE"]') %>%
html_attr('href')
precio_viejo <- cuadros[[i]] %>%
html_elements(css='[class="<div class="poly-component__price"]') %>%
html_text2()
precio_viejo <- reemplazar_vacio(precio_viejo)
precio_nuevo <- cuadros[[i]] %>%
html_elements(css='[class="poly-component__price"]') %>%
html_text2()
precio_nuevo <- reemplazar_vacio(precio_nuevo)
todo <- cuadros[[i]] %>%
html_text2()
)
i <- 1
for(i in 1:length(cuadros)){
tryCatch({
nombre <- cuadros[[i]] %>%
html_elements(css='[class="poly-card poly-card--list poly-card--large poly-card--CORE"]') %>%
html_text2()
url <- cuadros[[i]] %>%
html_elements(css='[class="poly-card poly-card--list poly-card--large poly-card--CORE"]') %>%
html_attr('href')
precio_viejo <- cuadros[[i]] %>%
html_elements(css='[class="<div class="poly-component__price"]') %>%
html_text2()
precio_viejo <- reemplazar_vacio(precio_viejo)
precio_nuevo <- cuadros[[i]] %>%
html_elements(css='[class="poly-component__price"]') %>%
html_text2()
precio_nuevo <- reemplazar_vacio(precio_nuevo)
todo <- cuadros[[i]] %>%
html_text2()
# Guardar temporal
tmp <- tibble(nombre = nombre,
precio_viejo = precio_viejo,
precio_nuevo = precio_nuevo,
todo = todo,
url = url
)
},error=function(e){})
datos_finales <- bind_rows(datos_finales,tmp)
print(i)
}
i <- 1
for(i in 1:length(cuadros)){
tryCatch({
nombre <- cuadros[[i]] %>%
html_elements(css='[class="poly-card poly-card--list poly-card--large poly-card--CORE"]') %>%
html_text2()
url <- cuadros[[i]] %>%
html_elements(css='[class="poly-card poly-card--list poly-card--large poly-card--CORE"]') %>%
html_attr('href')
precio_viejo <- cuadros[[i]] %>%
html_elements(css='[class="<div class="poly-component__price"]') %>%
html_text2()
precio_viejo <- reemplazar_vacio(precio_viejo)
precio_nuevo <- cuadros[[i]] %>%
html_elements(css='[class="poly-component__price"]') %>%
html_text2()
precio_nuevo <- reemplazar_vacio(precio_nuevo)
todo <- cuadros[[i]] %>%
html_text2()
# Guardar temporal
tmp <- tibble(nombre = nombre,
precio_viejo = precio_viejo,
precio_nuevo = precio_nuevo,
todo = todo,
url = url
)
},error=function(e){})
datos_finales <- bind_rows(datos_finales,)
print(i)
}
colnames(nombre)
View(pagina)
View(cuadros)
View(datos_finales)
View(datos_finales)
View(datos_finales)
i <- 1
for(i in 1:length(cuadros)){
tryCatch({
nombre <- cuadros[[i]] %>%
html_elements(css='[class="poly-card poly-card--list poly-card--large poly-card--CORE"]') %>%
html_text2()
url <- cuadros[[i]] %>%
html_elements(css='[class="poly-card poly-card--list poly-card--large poly-card--CORE"]') %>%
html_attr('href')
precio_viejo <- cuadros[[i]] %>%
html_elements(css='[class="<div class="poly-component__price"]') %>%
html_text2()
precio_viejo <- reemplazar_vacio(precio_viejo)
precio_nuevo <- cuadros[[i]] %>%
html_elements(css='[class="poly-component__price"]') %>%
html_text2()
precio_nuevo <- reemplazar_vacio(precio_nuevo)
todo <- cuadros[[i]] %>%
html_text2()
# Guardar temporal
tmp <- tibble(nombre = nombre,
precio_viejo = precio_viejo,
precio_nuevo = precio_nuevo,
todo = todo,
url = url
)
},error=function(e){})
datos_finales <- bind_rows(datos_finales)
print(i)
}
library(tidyverse)
library(wooldridge)  # install.packages("wooldridge") si no lo tienes
install.packages(viridis)
install.packages("viridis")
install.packages("ggrepel")
install.packages("ggrepel")
install.packages("viridis")
install.packages("wooldridge")
library(wooldridge)
library(scales)
library(viridis)
detach("package:viridisLite", unload = TRUE)
library(ggrepel)
head(mtcars)
str(mtcars)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point(size = 3, alpha = 0.7) +
labs(
title = "Relación entre Eficiencia y Potencia",
x = "Millas por Galón (MPG)",
y = "Caballos de Fuerza (HP)"
) +
theme_minimal()
# Ejemplo 1.2: Agregando color por variable categórica
ggplot(mtcars, aes(x = mpg, y = hp, color = factor(cyl))) +
geom_point(size = 3, alpha = 0.8) +
scale_color_viridis_d(name = "Cilindros") +
labs(
title = "Eficiencia vs Potencia por Número de Cilindros",
x = "Millas por Galón (MPG)",
y = "Caballos de Fuerza (HP)"
) +
theme_minimal()
# Ejemplo 1.5: Boxplot comparativo
ggplot(mtcars, aes(x = factor(cyl), y = mpg, fill = factor(cyl))) +
geom_boxplot(alpha = 0.7) +
scale_fill_viridis_d(name = "Cilindros") +
labs(
title = "Eficiencia por Número de Cilindros",
x = "Número de Cilindros",
y = "Millas por Galón (MPG)"
) +
theme_minimal() +
theme(legend.position = "none")  # Redundante con eje X
setwd("~/Ciencia de Datos 2025/FCE-trabajo-de-mercado-inmobiliario-")
